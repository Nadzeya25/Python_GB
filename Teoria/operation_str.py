# объединение или конкатенация.
name = "Tom"
surname = "Smith"
fullname = name + " " + surname
print(fullname)  # Tom Smith

name = "Tom"
age = 33
info = "Name   # " + name + " Age   # " + f_str(age) #переводим число в строковый тип,
# т.к складывать инт и стр нельзя
print(info)  # Name   # Tom Age   # 33

# Повторение строки
print("a" * 3)  # aaa
print("he" * 4)  # hehehehe

# Поиск в строке

f_str1 = "hello world"
exist = "hello" in f_str1
print(exist)    # True
 
exist = "sword" in f_str1
print(exist)    # False

# ************************************ Функции строк len(f_str1) *************************
len(f_str1)  #количество символов в строке

# ********************************* Методы строк************************
# При вызове методов необходимо помнить, что строки в Python относятся
#  к категории неизменяемых последовательностей,
#  то есть все функции и методы могут лишь создавать новую строку.

.isalpha()   # возвращает True, если строка состоит только из алфавитных символов
.
.islower()   # возвращает True, если строка состоит только из символов в нижнем регистре
.
.isupper()   # возвращает True, если все символы строки в верхнем регистре
.
.isdigit()   # возвращает True, если все символы строки - цифры

.isnumeric()   # возвращает True, если строка представляет собой число
# Например, если мы ожидаем ввод с клавиатуры числа,
#  то перед преобразованием введенной строки в число можно проверить,
#   с помощью метода isnumeric() введено ли в действительности число,
#  и если так, то выполнить операцию преобразования:
string = input("Введите число: ")
if string.isnumeric():
    number = int(string)
    print(number)

.startswith(f_str)   # возвращает True, если строка начинается с подстроки f_str
# Проверка, начинается или оканчивается строка на определенную подстроку:
file_name = "hello.py" 
starts_with_hello = file_name.startswith("hello")   # True
ends_with_exe = file_name.endswith("exe")           # False

.
.endswith(f_str)   # возвращает True, если строка заканчивается на подстроку f_str
.
.lower()   # переводит строку в нижний регистр
.
.upper()   # переводит строку в вехний регистр
.
.title()   # начальные символы всех слов в строке переводятся в верхний регистр
.
.capitalize()   # переводит в верхний регистр первую букву только самого первого слова строки

.strip()    #Удаление пробелов в начале и в конце строки:
string = "   hello  world!  "
string = string.strip()
print(string)           # hello  world!


.lstrip()   # удаляет начальные пробелы из строки
.
.rstrip()   # удаляет конечные пробелы из строки
.
.fstrip()   # удаляет начальные и конечные пробелы из строки
.
.ljust(width)   # если длина строки меньше параметра width,
#  то справа от строки добавляются пробелы, чтобы дополнить значение width
#  , а сама строка выравнивается по левому краю

.rjust(width)   # если длина строки меньше параметра width,
#  то слева от строки добавляются пробелы, чтобы дополнить значение width,
#   а сама строка выравнивается по правому краю

.center(width)   # если длина строки меньше параметра width,
#  то слева и справа от строки равномерно добавляются пробелы,
#   чтобы дополнить значение width, а сама строка выравнивается по центру


# ****************************** .find ****************************************************************


.find(f_str, start , end)   # возвращает индекс подстроки в строке.
#  Если подстрока не найдена, возвращается число -1
#  возвращает индекс первого вхождения подстроки в строку и имеет три формы:

.find(f_str)  #поиск подстроки f_str ведется с начала строки до ее конца

.find(f_str, start) #параметр start задает начальный индекс, с которого будет производиться поиск

.find(f_str, start, end)  #параметр end задает конечный индекс, до которого будет идти поиск

welcome = "Hello world! Goodbye world!"
index_ = welcome.find("wor")
print(index_)       # 6
 
# поиск с 10-го индекса
index_ = welcome.find("wor",10)
print(index_)       # 21
 
# поиск с 10 по 15 индекс
index = welcome.find("wor",10,15)
print(index_)       # -1




.replace(old, new, num)   # заменяет в строке одну подстроку на другую
# пример
phone = "+1-234-567-89-10"
 
# замена дефисов на пробел
edited_phone = phone.replace("-", " ")
print(edited_phone)     # +1 234 567 89 10
 
# удаление дефисов
edited_phone = phone.replace("-", "")
print(edited_phone)     # +12345678910
 
# замена только первого дефиса
edited_phone = phone.replace("-", "", 1)
print(edited_phone)     # +1234-567-89-10

# ****************************** .split ******************************************************************

.split([delimeter[, num]])   # разбивает строку на подстроки в зависимости от разделителя
#пример
text = "Это был огромный, в два обхвата дуб, с обломанными ветвями и с обломанной корой"
# разделение по пробелам
splitted_text = text.split() #создается список подстрок разрезанной по пробелам строки
print(splitted_text)  
#['Это', 'был', 'огромный,', 'в', 'два', 'обхвата', 'дуб,', 'с', 'обломанными', 'ветвями', 'и', 'с', 'обломанной', 'корой']
print(splitted_text[6])     # дуб,

 
# # разбиение по запятым
splitted_text = text.split(",")
print(splitted_text)#создается список подстрок  строки, разрезанной по запятым
#['Это был огромный', ' в два обхвата дуб', ' с обломанными ветвями и с обломанной корой']
print(splitted_text[1])     # в два обхвата дуб
 
# # разбиение по первым пяти пробелам
splitted_text = text.split(" ", 5)
#['Это', 'был', 'огромный,', 'в', 'два', 'обхвата дуб, с обломанными ветвями и с обломанной корой']
print(splitted_text)        
# print(splitted_text[5])     # обхвата дуб, с обломанными ветвями и с обломанной корой

#*********************************** .partition() *******************************************

#  разбивает строку по разделителю на три подстроки и возвращает кортеж из трех элементов
#  - подстрока до разделителя, разделитель и подстрока после разделителя:

.partition(delimeter)   # разбивает строку по разделителю на три подстроки
#  и возвращает кортеж из трех элементов
#  - *** подстрока до разделителя *** разделитель *** подстрока после разделителя
# пример
text = "Это был огромный, в два обхвата дуб, с обломанными ветвями и с обломанной корой"
text_parts = text.partition("дуб")
print(text_parts)
# ('Это был огромный, в два обхвата ', 'дуб', ', с обломанными ветвями и с обломанной корой')

# ***********************************  пробел.join(str1): он объединяет список строк  ********************************

.join(strs)  
# объединяет строки из списка строк в одну строку, вставляя между ними определенный разделитель
# пример
words = ["Let", "me", "speak", "from", "my", "heart", "in", "English"]
sentence = " ".join(words)# разделитель - пробел
print(sentence)  # Let me speak from my heart in English


 
# разделитель - вертикальная черта
sentence = " | ".join(words)
print(sentence)  # Let | me | speak | from | my | heart | in | English

# Вместо списка в метод join можно передать простую строку,
#  тогда разделитель будет вставляться между символами этой строки:
word = "hello"
joined_word = "|".join(word)
print(joined_word)      # h|e|l|l|o

# *********************************  форматирование строк *************************************
# https://metanit.com/python/tutorial/5.3.php




# *****************************  print(str1)    **************************************************************



# Перебор строки
# С помощью цикла for можно перебрать все символы строки:

string = "hello world"
for char in string:
    print(char)



