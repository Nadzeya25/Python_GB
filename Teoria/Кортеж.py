#Создание кортежа(tuple)
a=(1,2,3,4)
a=1,2,3
a=tuple(range(12))
a=tuple([1,2,3,4,])
a=tuple((1,2,3,4,))
# Операции как в списках
a=(1,2,3,4)*2=(1,2,3,4,1,2,3,4)
# НЕизменяемый объект, но изменяемые объекты внутри кортежа можно менять по прежнему
a.__sizeof__() #- сколько байтов занимает кортеж, словарь или список
sorted(my_tuple) #- сортировка кортежа
*a #- раскрывание итерируемого объекта


str2 = "Let", "me", "speak", "from", "my", "heart", "in", "English" 
print(type(str2))  # это кортеж, а не строка

data = ["Tom", 37, "Google"]
tom = tuple(data)
print(tom)      # ("Tom", 37, "Google")

# Для создания кортежа используются круглые скобки, в которые помещаются его значения, разделенные запятыми:
tom = ("Tom", 23)
print(tom)     # ("Tom", 23)

# Также для определения кортежа мы можем просто перечислить значения через запятую без применения скобок:
tom = "Tom", 23
print(tom)     # ("Tom", 23)

# Если вдруг кортеж состоит из одного элемента, то после единственного элемента кортежа
#  необходимо поставить запятую:
tom = ("Tom",)

# Для создания кортежа из другого набора элементов, например, из списка,
#  можно передать список в функцию tuple(),
#  которая возвратит кортеж:

data = ["Tom", 37, "Google"]
tom = tuple(data)
print(tom)      # ("Tom", 37, "Google")

# С помощью встроенной функции len() можно получить длину кортежа:
tom = ("Tom", 37, "Google")
print(len(tom))     # 3

# Обращение к элементам кортежа
# Обращение к элементам в кортеже происходит также, как и в списке, по индексу.
#  Индексация начинается также с нуля при получении элементов с начала списка
#   и с -1 при получении элементов с конца списка:

tom = ("Tom", 37, "Google", "software developer")
print(tom[0])       # Tom
print(tom[1])       # 37
print(tom[-1])      # software developer

# Но так как кортеж - неизменяемый тип (immutable),
#  то мы не сможем изменить его элементы. То есть следующая запись работать не будет:
tom[1] = "Tim"
# При необходимости мы можем разложить кортеж на отдельные переменные:
name, age, company, position = ("Tom", 37, "Google", "software developer")
print(name)         # Tom
print(age)          # 37
print(position)     # software developer
print(company)     # Google



# ****************************  # Получение подкортежей(срезы) **************************************************

# Как и в списках, можно получить часть кортежа в виде другого кортежа

tom = ("Tom", 37, "Google", "software developer")
 
# получем подкортеж с 1 по 3 элемента (не включая)
print(tom[1:3])     # (37, "Google")
 
# получем подкортеж с 0 по 3 элемента (не включая)
print(tom[:3])     # ("Tom", 37, "Google")
 
# получем подкортеж с 1 по послдений элемент
print(tom[1:])     # (37, "Google", "software developer")

# Кортеж как параметр и результат функций
# Особенно удобно использовать кортежи, когда необходимо возвратить из функции сразу несколько значений.
#  Когда функция возвращает несколько значений, фактически она возвращает в кортеж:

def get_user():
    name = "Tom"
    age = 22
    company = "Google"
    return name, age, company

user = get_user()
print(user)     # ("Tom", 37, "Google")

# *****************************# Перебор кортежей **********************************

# Для перебора кортежа можно использовать стандартные циклы for и while.
#  С помощью цикла for:
tom = ("Tom", 22, "Google")
for item in tom:
    print(item)

# С помощью цикла while:
tom = ("Tom", 22, "Google")
i = 0
while i < len(tom):
    print(tom[i])
    i += 1    
#Tom
# 22
# Google

tom = ("Tom", 22, "Google")
i = 0
while i < len(tom):
    print(tom[i], end='')
    i += 1
#  Tom 22 Google       