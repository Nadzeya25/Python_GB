# создаем из строки с помощью метода
string11 = 'oiuyt'
list11 = list(string11)
print(list11)  # ['o', 'i', 'u', 'y', 't']

list10 = list('tproger')
print(list10)  # ['t', 'p', 'r', 'o', 'g', 'e', 'r']

#  с помощью цикла
string12 = 'oiuyt'
list12 = [i for i in string12] # перевод = переносим каждый элемент  i в список, пока он есть в строке
print(list12)

# создание списка из строки с циклом
data2 = [i for i in "python"]
print(data2)

# простой генератор из последовательности
data1 = [i for i in range(0, 10)]
print(data1)

print(list('BEEGEEK')) # ['B', 'E', 'E', 'G', 'E', 'E', 'K']
a = input().split() #- получаем список из строк
# генератор с условием (список четных чисел от 0 до 11 не включительно)
data3 = [i for i in range(0, 11) if i % 2 == 0]
print(data3)

list6 = [int(i) for i in input().split()] #-  способ создания списка

#добавление целого числа, введенного с клавиатуры, в конец списка
list1 = []
for i in range(3): #ввод 3 элементов в цикле
    list1.append(int(input("введите числа через enter")))  
print(list1)   

# Создание списка случайных чисел
import random #подключение модуля случайных чисел random
mas1=[] # объявление пустого списка
for i in range(10):
    mas1.append(random.randint(0, 100)) #заполнение списка 10-ю случайными числами в диапазоне от 0 до 100
print(mas1) # вывод списка

#Создание списка случайных чисел с помощью генератора списка
import random
mas2 = [random.randint(0, 100) for i in range(10)]
print(mas2)
            #задача
# Используя генератор списка, создайте новый список с именем "newlist"
#  из списка "numbers", который содержит только положительные числа из списка в виде целых чисел.
numbers = [34.6, -203.4, 44.9, 68.3, -12.2, 44.6, 0.7]
newlist = []
newlist = [int(x) for x in numbers if x > 0]
 # перевод - берем элемент х из списка numbers, переводя его в целое число,
 #  (и если он больше нуля) и кладем его в новый список
print(newlist)



#ГЕНЕРАТОРЫ СПИСКОВ - list comprehensions:

#[выражение for val in коллекция]
zeros = [0 for i in range(10)] - [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
squares = [i ** 2 for i in range(1,8)] - [1, 4, 9, 16, 25, 36, 49]
cubes = [i ** 3 for i in range(10, 21)] #- Создать список, заполненный кубами целых чисел от 10 до 20 можно так:
chars = [c for c in 'abcdefg'] #- Создать список, заполненный символами строки:
print(chars)
lines = [input() for _ in range(int(input()))] #- если сначала вводится число n – количество строк,
#а затем строки,то создать список можно так
numbers = [int(input()) for _ in range(int(input()))] #- Если требуется считать список чисел,

a=[int(i) for i in a] #- каждый элемент этого списка преобразуется в целочисленное

#Пример:
a = [('ivanov', 2002)('Petrov', 2004)('Sidorov', 1980)]
b = [elem[1] for elem in a if elem[0].startswith('P')] #- выведет первые элементы кортежей, если его нулевой элемент начинается с 'P' = [2004]
b = [elem[0] for elem in a if elem[1]>2000] #- выведет нулевые элементы кортежей первый элемент которых больше 2000 =['ivanov', 'Petrov']
d = [elem[0] if elem[1] > 2000 else elem[1] for elem in a] #- выведет нулевые элементы кортежа, если первый элемент > 2000 в противном случае выведет первый элемент

#Пример:
a={'ivanov':{'age': 1995, 'hobby': 'soccer', 'car': 'BMW'}, 'Petrov':{'age': 2002, 'hobby': 'basketball', 'car': 'Opel'},'Sidorov':{'age': 1991, 'hobby': 'chess', 'car': 'BMW'}}
b=[(elem, a[elem]['car']) for elem in a if a[elem]['age']<2000] #- выведет название машины (значения ключа "car") если ворзраст меньше 2000
#и фамилию владельца(т.е ключи подходящие по условию)=[('ivanov', 'BMW'), ('Sidorov', 'BMW')]

#Пример:
s='dfgh4356341wertgher45yhrt56745yert'
b=[int(i) for i in s if i.isdigit()] #- создаст список из цифр из переменной s

#Пример:
import random
a=[random.randit(-10,10) for i in range(10)] #- создает список с 10 рандомными числами
b=[abs(elem) for elem in a] #- убирает все минусы
a=[elem+1 for elem in a] #- увеличиваем каждый элемент списка на 1

#[выражение for val in коллекция if условие]
evens = [i for i in range(21) if i % 5 == 0 or i % 3 == 0 ] #- если требуется создать список кратных 3 или 5 от 0 до 20

#Матрица(вложенный списки):
n=5
m=4
a=[[0]*m for i in range(n)] #- создает  матрицу с 5 строками и 4 столбцами [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
a=[[0]*n for i in range(n)] #- если n=5 [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
a = [i * j for i in range(1, 5) for j in range(2)] - [0, 1, 0, 2, 0, 3, 0, 4]
a=[(i,j) for i in 'abc' for j in [1,2,3]] - [('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3), ('c', 1), ('c', 2), ('c', 3)]
a=[i*j for i in [2,3,4,5] for j in [1,2,3] if i*j>10] - [12, 15]

#Пример:
import random
n=4
m=6
a=[[random.randit(1,6) for j in range(m)] for i in range(n)]
for i in a:
    print(i)  #- выведет n=4 строки по m=6 случайных чисел от 1 до 6
[6, 4, 4, 4, 2, 4]
[1, 6, 6, 3, 4, 2]
[2, 4, 3, 2, 5, 6]
[2, 3, 4, 3, 2, 6]
b=[a[i][j] for i in range(n) for j in range(m) if i==j] #- список из элементов главной диагонали матрицы
с=[a[2][j] for j in range(m)]] #- список из элементов второй строки
d=[a[i][3] for i in range(n)]] #- список из элементов третьего столбика

#Пример таблица умножения:
n=9
m=9
a=[[i*j for j in range(1,m+1)] for i in range(1,n+1)]
for i in a:
    print(i)

#генератор массива:
a=[[0 for j in range(m)] for i in range(n)]

#Такой код:
s = 'Python'

print(*s)
print()
print(*s, sep='\n')

#выведет:

P y t h o n

P
y
t
h
o
n

            #ВЫРАЖЕНИЯ-ГЕНЕРАТОРЫ - list comprehensions:
# Генератор - итератор, элементы которого можно обойти только один раз
# Итератор - объект, который поддерживает функцию next(). И помнит о том, какой элемент будет использоваться следующим
# Итерируемый объект - объект который предоставляет возможность обойти поочередно свои элементы. Может быть преобразован к итератору.
s=[1,2,3] #- итерируемый объект
d=iter(s) #- итератор
next(d)
b=(i**2 for i in range(1,6)) #- в круглых скобках вместо квадратных
# итерация - процесс перебора элементов коллекции внутри цикла или функции, которая делает перебор
# пример:
c=list(range(100000000)) #- выражения-генератора не хранит в памяти всю информацию
c=list(c) #- преобразовать генератор к списку
#К генераторам невозможно применить индекс, функцию len()

